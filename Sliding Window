#Longest Substring Without Repeating Character Problem Complete Solution
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        unordered_map<char, int>CHI;
        int maxLength = 0;
        int start = 0;
        for(int i = 0; i< s.length(); i++){
            char ai = s[i];
            if(CHI.find(ai) != CHI.end() && CHI[ai] >= start){
            start = CHI[ai]+1;
            }
            CHI[ai]=i;
            maxLength = max(maxLength, i-start+1);
        }
        return maxLength;
    }
};
#Two Sum Array Problem Complete Solution
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> num_map;
        for (int i = 0; i < nums.size(); i++) {
            int complement = target - nums[i];
            if (num_map.find(complement) != num_map.end()) {
                return {num_map[complement], i};
            }
            num_map[nums[i]] = i;
        }
        return {};
    }
};
#Squares of a Sorted Array Problem Complete Solution
class Solution {
public:
    vector<int> sortedSquares(vector<int>& nums) {
        for (int i = 0; i < nums.size(); i++) {
            nums[i] *= nums[i];
        }
        sort(nums.begin(), nums.end());
        return nums;
    }
};
